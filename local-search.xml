<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HDU-2732</title>
    <link href="/2020/02/07/HDU-2732/"/>
    <url>/2020/02/07/HDU-2732/</url>
    
    <content type="html"><![CDATA[<h3 id="题目名称："><a href="#题目名称：" class="headerlink" title="题目名称："></a>题目名称：</h3><p>HDU - 2732 Leapin’ Lizards</p><h3 id="题目链接："><a href="#题目链接：" class="headerlink" title="题目链接："></a>题目链接：</h3><p><a href="https://vjudge.net/problem/HDU-2732" target="_blank" rel="noopener">https://vjudge.net/problem/HDU-2732</a></p><h4 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h4><p>题目是说一个n*m的迷宫中，有每个格子有柱子。柱子高度为0~3，高度为0的柱子是不能站的（高度为0就是没有柱子）<br>在一些有柱子的格子上有一些蜥蜴，一次最多跳距离d,相邻格子的距离是1，只要跳出迷宫就是安全的。这个距离是曼哈顿距离（好像是的）<br>。蜥蜴一次最多跳距离d,但是起跳的地方的柱子高度会减一，一个柱子同一时间只能有一个蜥蜴要求最少几个不能逃出迷宫。</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>最大流问题，求出dinic跑出的最大流，然后总数-ans就是剩余的数。建图方法：</p><p>1.每个柱子有容纳量，超过了就塌了。u–&gt;u’ 边权为容纳量</p><p>2.有蜥蜴的柱子与起点s相连，即s–&gt;u,边权为1</p><p>3.边界上可以跳出界的与终点相连，条件(x1&lt;=p||y1&lt;=p||n-x1+1&lt;=p||len-y1+1&lt;=p)&amp;&amp;h[x1][y1]，u’–&gt;t,边权0x3f3f3f3f</p><p>4.任意两个有容纳量的柱子，且曼哈顿距离&lt;=d，可以相连，即u’–&gt;v,v’-&gt;u，边权为0x3f3f3f3f.</p><p>ps：1.注意输出时候单复数！<br>2.注意是j+(i-1)*len(len 表示一行的列数！！！）一开始写成了n，WA了一片。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre><code class="cpp">#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;using namespace std;const int maxn=100000+5;const int N=500+5;int k=1,head[maxn],deep[maxn],s,t,n,m,T,ans,p,h[30][N*10];struct node{    int to,next,w;}edge[maxn*2];void add(int u,int v,int w){    edge[++k].to=v;edge[k].next=head[u];head[u]=k;edge[k].w=w;}bool bfs(){    queue&lt;int&gt;q;    memset(deep,0,sizeof(deep));    deep[s]=1;    q.push(s);    while(!q.empty())    {        int x=q.front();q.pop();        for(int i=head[x];i;i=edge[i].next)        {            if(!deep[edge[i].to]&amp;&amp;edge[i].w)            {                deep[edge[i].to]=deep[x]+1;                q.push(edge[i].to);            }        }    }    return deep[t];}int dfs(int x,int F){    if(x==t)return F;    int f=0;    for(int i=head[x];i;i=edge[i].next)    {        if(deep[edge[i].to]==deep[x]+1&amp;&amp;edge[i].w)        {            int w=dfs(edge[i].to,min(F-f,edge[i].w));            edge[i].w-=w;edge[i^1].w+=w;f+=w;            if(f==F)break;        }    }    if(!f)deep[x]=0;    return f;}void dinic(){    while(bfs())    {        ans+=dfs(s,0x3f3f3f3f);    }}int main(){    scanf(&quot;%d&quot;,&amp;T);    int opt=0;    while(T--)    {        opt++;        k=1;ans=0;s=0;t=5*N;        memset(head,0,sizeof(head));        memset(edge,0,sizeof(edge));        memset(h,0,sizeof(h));        scanf(&quot;%d%d&quot;,&amp;n,&amp;p);        int len=0;int tot=0;        for(int i=1;i&lt;=n;i++)        {            string x;            cin&gt;&gt;x;len=x.length();            for(int j=1;j&lt;=len;j++)            {                int w=x[j-1]-&#39;0&#39;;h[i][j]=w;                if(w)                {                    add(j+(i-1)*len,j+(i-1)*len+N,w);add(j+(i-1)*len+N,j+(i-1)*len,0);                }            }        }        for(int i=1;i&lt;=n;i++)        {            string x;            cin&gt;&gt;x;len=x.length();            for(int j=1;j&lt;=len;j++)            {                if(x[j-1]==&#39;L&#39;)                {                    tot++;                    add(s,j+(i-1)*len,1);add(j+(i-1)*len,s,0);                }            }        }        for(int x1=1;x1&lt;=n;x1++)        {            for(int y1=1;y1&lt;=len;y1++)            {                for(int x2=1;x2&lt;=n;x2++)                {                    for(int y2=1;y2&lt;=len;y2++)                    {                        if(x1==x2&amp;&amp;y1==y2)continue;                        if(abs(x1-x2)+abs(y1-y2)&gt;p)continue;                        if(!h[x1][y1]||!h[x2][y2])continue;                        add(y1+(x1-1)*len+N,y2+(x2-1)*len,0x3f3f3f3f);add(y2+(x2-1)*len,y1+(x1-1)*len+N,0);                        add(y2+(x2-1)*len+N,y1+(x1-1)*len,0x3f3f3f3f);add(y1+(x1-1)*len,y2+(x2-1)*len+N,0);                    }                }            }        }        for(int x1=1;x1&lt;=n;x1++)        {            for(int y1=1;y1&lt;=len;y1++)            {                if((x1&lt;=p||y1&lt;=p||n-x1+1&lt;=p||len-y1+1&lt;=p)&amp;&amp;h[x1][y1])                {                    add(y1+(x1-1)*len+N,t,0x3f3f3f3f);add(t,y1+(x1-1)*len+N,0);                }            }        }        dinic();        printf(&quot;Case #%d: &quot;,opt);        if(ans==tot)        {            printf(&quot;no lizard was left behind.\n&quot;);            continue;        }        else if(tot-ans==1)        {            printf(&quot;1 lizard was left behind.\n&quot;);        }        else         {            printf(&quot;%d lizards were left behind.\n&quot;,tot-ans);        }    }    return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>网络流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/07/hello-world/"/>
    <url>/2020/02/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dinic/MCMF</title>
    <link href="/2020/02/06/dinic-MCMF/"/>
    <url>/2020/02/06/dinic-MCMF/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>网络流</tag>
      
      <tag>最小割</tag>
      
      <tag>最大流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
